// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	models "github.com/afrizal423/Golang-Perpustakaan-Restful-API/app/models"
	mock "github.com/stretchr/testify/mock"
)

// IBukuRepository is an autogenerated mock type for the IBukuRepository type
type IBukuRepository struct {
	mock.Mock
}

// CariJenisBuku provides a mock function with given fields: c
func (_m *IBukuRepository) CariJenisBuku(c string) ([]models.Jenis_Buku, error) {
	ret := _m.Called(c)

	var r0 []models.Jenis_Buku
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.Jenis_Buku, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(string) []models.Jenis_Buku); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Jenis_Buku)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CariPenerbitBuku provides a mock function with given fields: c
func (_m *IBukuRepository) CariPenerbitBuku(c string) ([]models.Penerbit_Buku, error) {
	ret := _m.Called(c)

	var r0 []models.Penerbit_Buku
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.Penerbit_Buku, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(string) []models.Penerbit_Buku); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Penerbit_Buku)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CariPenulisBuku provides a mock function with given fields: c
func (_m *IBukuRepository) CariPenulisBuku(c string) ([]models.Penulis_Buku, error) {
	ret := _m.Called(c)

	var r0 []models.Penulis_Buku
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.Penulis_Buku, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(string) []models.Penulis_Buku); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Penulis_Buku)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJenisBuku provides a mock function with given fields: data
func (_m *IBukuRepository) CreateJenisBuku(data models.Jenis_Buku) (models.Jenis_Buku, error) {
	ret := _m.Called(data)

	var r0 models.Jenis_Buku
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Jenis_Buku) (models.Jenis_Buku, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(models.Jenis_Buku) models.Jenis_Buku); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(models.Jenis_Buku)
	}

	if rf, ok := ret.Get(1).(func(models.Jenis_Buku) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePenerbitBuku provides a mock function with given fields: data
func (_m *IBukuRepository) CreatePenerbitBuku(data models.Penerbit_Buku) (models.Penerbit_Buku, error) {
	ret := _m.Called(data)

	var r0 models.Penerbit_Buku
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Penerbit_Buku) (models.Penerbit_Buku, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(models.Penerbit_Buku) models.Penerbit_Buku); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(models.Penerbit_Buku)
	}

	if rf, ok := ret.Get(1).(func(models.Penerbit_Buku) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePenulisBuku provides a mock function with given fields: data
func (_m *IBukuRepository) CreatePenulisBuku(data models.Penulis_Buku) (models.Penulis_Buku, error) {
	ret := _m.Called(data)

	var r0 models.Penulis_Buku
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Penulis_Buku) (models.Penulis_Buku, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(models.Penulis_Buku) models.Penulis_Buku); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(models.Penulis_Buku)
	}

	if rf, ok := ret.Get(1).(func(models.Penulis_Buku) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteJenisBuku provides a mock function with given fields: id
func (_m *IBukuRepository) DeleteJenisBuku(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePenerbitBuku provides a mock function with given fields: id
func (_m *IBukuRepository) DeletePenerbitBuku(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePenulisBuku provides a mock function with given fields: id
func (_m *IBukuRepository) DeletePenulisBuku(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllJenisBuku provides a mock function with given fields:
func (_m *IBukuRepository) GetAllJenisBuku() ([]models.Jenis_Buku, error) {
	ret := _m.Called()

	var r0 []models.Jenis_Buku
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Jenis_Buku, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Jenis_Buku); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Jenis_Buku)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPenerbitBuku provides a mock function with given fields:
func (_m *IBukuRepository) GetAllPenerbitBuku() ([]models.Penerbit_Buku, error) {
	ret := _m.Called()

	var r0 []models.Penerbit_Buku
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Penerbit_Buku, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Penerbit_Buku); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Penerbit_Buku)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPenulisBuku provides a mock function with given fields:
func (_m *IBukuRepository) GetAllPenulisBuku() ([]models.Penulis_Buku, error) {
	ret := _m.Called()

	var r0 []models.Penulis_Buku
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Penulis_Buku, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Penulis_Buku); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Penulis_Buku)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJenisBukuById provides a mock function with given fields: id
func (_m *IBukuRepository) GetJenisBukuById(id string) (*models.Jenis_Buku, error) {
	ret := _m.Called(id)

	var r0 *models.Jenis_Buku
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Jenis_Buku, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Jenis_Buku); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Jenis_Buku)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPenerbitBukuById provides a mock function with given fields: id
func (_m *IBukuRepository) GetPenerbitBukuById(id string) (*models.Penerbit_Buku, error) {
	ret := _m.Called(id)

	var r0 *models.Penerbit_Buku
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Penerbit_Buku, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Penerbit_Buku); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Penerbit_Buku)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPenulisBukuById provides a mock function with given fields: id
func (_m *IBukuRepository) GetPenulisBukuById(id string) (*models.Penulis_Buku, error) {
	ret := _m.Called(id)

	var r0 *models.Penulis_Buku
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Penulis_Buku, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Penulis_Buku); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Penulis_Buku)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HitungDataJenisBuku provides a mock function with given fields: id
func (_m *IBukuRepository) HitungDataJenisBuku(id string) int64 {
	ret := _m.Called(id)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// HitungDataPenerbitBuku provides a mock function with given fields: id
func (_m *IBukuRepository) HitungDataPenerbitBuku(id string) int64 {
	ret := _m.Called(id)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// HitungDataPenulisBuku provides a mock function with given fields: id
func (_m *IBukuRepository) HitungDataPenulisBuku(id string) int64 {
	ret := _m.Called(id)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// UpdateJenisBuku provides a mock function with given fields: data
func (_m *IBukuRepository) UpdateJenisBuku(data models.Jenis_Buku) (models.Jenis_Buku, error) {
	ret := _m.Called(data)

	var r0 models.Jenis_Buku
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Jenis_Buku) (models.Jenis_Buku, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(models.Jenis_Buku) models.Jenis_Buku); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(models.Jenis_Buku)
	}

	if rf, ok := ret.Get(1).(func(models.Jenis_Buku) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePenerbitBuku provides a mock function with given fields: data
func (_m *IBukuRepository) UpdatePenerbitBuku(data models.Penerbit_Buku) (models.Penerbit_Buku, error) {
	ret := _m.Called(data)

	var r0 models.Penerbit_Buku
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Penerbit_Buku) (models.Penerbit_Buku, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(models.Penerbit_Buku) models.Penerbit_Buku); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(models.Penerbit_Buku)
	}

	if rf, ok := ret.Get(1).(func(models.Penerbit_Buku) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePenulisBuku provides a mock function with given fields: data
func (_m *IBukuRepository) UpdatePenulisBuku(data models.Penulis_Buku) (models.Penulis_Buku, error) {
	ret := _m.Called(data)

	var r0 models.Penulis_Buku
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Penulis_Buku) (models.Penulis_Buku, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(models.Penulis_Buku) models.Penulis_Buku); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(models.Penulis_Buku)
	}

	if rf, ok := ret.Get(1).(func(models.Penulis_Buku) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIBukuRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIBukuRepository creates a new instance of IBukuRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIBukuRepository(t mockConstructorTestingTNewIBukuRepository) *IBukuRepository {
	mock := &IBukuRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
